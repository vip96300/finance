<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rw.finance.client.dao.LogInfoMapper">
  <resultMap id="BaseResultMap" type="com.rw.finance.common.entity.LogInfo">
    <id column="log_id" jdbcType="BIGINT" property="logId" />
    <result column="exception" jdbcType="VARCHAR" property="exception" />
    <result column="method" jdbcType="VARCHAR" property="method" />
    <result column="method_args" jdbcType="VARCHAR" property="methodArgs" />
    <result column="operate_ip" jdbcType="VARCHAR" property="operateIp" />
    <result column="operate_time" jdbcType="VARCHAR" property="operateTime" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="request_uri" jdbcType="VARCHAR" property="requestUri" />
    <result column="role" jdbcType="VARCHAR" property="role" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="user_agent" jdbcType="VARCHAR" property="userAgent" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    log_id, exception, method, method_args, operate_ip, operate_time, remark, request_uri, 
    role, status, user_agent, user_id
  </sql>
  <select id="selectByExample" parameterType="com.rw.finance.common.entity.LogInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from log_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from log_info
    where log_id = #{logId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from log_info
    where log_id = #{logId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.rw.finance.common.entity.LogInfoExample">
    delete from log_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.rw.finance.common.entity.LogInfo">
    insert into log_info (log_id, exception, method, 
      method_args, operate_ip, operate_time, 
      remark, request_uri, role, 
      status, user_agent, user_id
      )
    values (#{logId,jdbcType=BIGINT}, #{exception,jdbcType=VARCHAR}, #{method,jdbcType=VARCHAR}, 
      #{methodArgs,jdbcType=VARCHAR}, #{operateIp,jdbcType=VARCHAR}, #{operateTime,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR}, #{requestUri,jdbcType=VARCHAR}, #{role,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{userAgent,jdbcType=VARCHAR}, #{userId,jdbcType=BIGINT}
      )
    <selectKey resultType="java.lang.Long" order="AFTER"  keyProperty="logId">
      SELECT  LAST_INSERT_ID()
    </selectKey>
  </insert>
  <insert id="insertSelective" parameterType="com.rw.finance.common.entity.LogInfo">
    insert into log_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="logId != null">
        log_id,
      </if>
      <if test="exception != null">
        exception,
      </if>
      <if test="method != null">
        method,
      </if>
      <if test="methodArgs != null">
        method_args,
      </if>
      <if test="operateIp != null">
        operate_ip,
      </if>
      <if test="operateTime != null">
        operate_time,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="requestUri != null">
        request_uri,
      </if>
      <if test="role != null">
        role,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="userAgent != null">
        user_agent,
      </if>
      <if test="userId != null">
        user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="logId != null">
        #{logId,jdbcType=BIGINT},
      </if>
      <if test="exception != null">
        #{exception,jdbcType=VARCHAR},
      </if>
      <if test="method != null">
        #{method,jdbcType=VARCHAR},
      </if>
      <if test="methodArgs != null">
        #{methodArgs,jdbcType=VARCHAR},
      </if>
      <if test="operateIp != null">
        #{operateIp,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null">
        #{operateTime,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="requestUri != null">
        #{requestUri,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="userAgent != null">
        #{userAgent,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
    </trim>
    <selectKey resultType="java.lang.Long" order="AFTER"  keyProperty="logId">
      SELECT  LAST_INSERT_ID()
    </selectKey>
  </insert>
  <select id="countByExample" parameterType="com.rw.finance.common.entity.LogInfoExample" resultType="java.lang.Long">
    select count(*) from log_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update log_info
    <set>
      <if test="record.logId != null">
        log_id = #{record.logId,jdbcType=BIGINT},
      </if>
      <if test="record.exception != null">
        exception = #{record.exception,jdbcType=VARCHAR},
      </if>
      <if test="record.method != null">
        method = #{record.method,jdbcType=VARCHAR},
      </if>
      <if test="record.methodArgs != null">
        method_args = #{record.methodArgs,jdbcType=VARCHAR},
      </if>
      <if test="record.operateIp != null">
        operate_ip = #{record.operateIp,jdbcType=VARCHAR},
      </if>
      <if test="record.operateTime != null">
        operate_time = #{record.operateTime,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.requestUri != null">
        request_uri = #{record.requestUri,jdbcType=VARCHAR},
      </if>
      <if test="record.role != null">
        role = #{record.role,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.userAgent != null">
        user_agent = #{record.userAgent,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update log_info
    set log_id = #{record.logId,jdbcType=BIGINT},
      exception = #{record.exception,jdbcType=VARCHAR},
      method = #{record.method,jdbcType=VARCHAR},
      method_args = #{record.methodArgs,jdbcType=VARCHAR},
      operate_ip = #{record.operateIp,jdbcType=VARCHAR},
      operate_time = #{record.operateTime,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      request_uri = #{record.requestUri,jdbcType=VARCHAR},
      role = #{record.role,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      user_agent = #{record.userAgent,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.rw.finance.common.entity.LogInfo">
    update log_info
    <set>
      <if test="exception != null">
        exception = #{exception,jdbcType=VARCHAR},
      </if>
      <if test="method != null">
        method = #{method,jdbcType=VARCHAR},
      </if>
      <if test="methodArgs != null">
        method_args = #{methodArgs,jdbcType=VARCHAR},
      </if>
      <if test="operateIp != null">
        operate_ip = #{operateIp,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null">
        operate_time = #{operateTime,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="requestUri != null">
        request_uri = #{requestUri,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        role = #{role,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="userAgent != null">
        user_agent = #{userAgent,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
    </set>
    where log_id = #{logId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.rw.finance.common.entity.LogInfo">
    update log_info
    set exception = #{exception,jdbcType=VARCHAR},
      method = #{method,jdbcType=VARCHAR},
      method_args = #{methodArgs,jdbcType=VARCHAR},
      operate_ip = #{operateIp,jdbcType=VARCHAR},
      operate_time = #{operateTime,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      request_uri = #{requestUri,jdbcType=VARCHAR},
      role = #{role,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      user_agent = #{userAgent,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=BIGINT}
    where log_id = #{logId,jdbcType=BIGINT}
  </update>
</mapper>